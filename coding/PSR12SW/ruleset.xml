<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PSR12SW" xsi:noNamespaceSchemaLocation="../../../phpcs.xsd">
    <description>The PSR-12 extended (PSR12SW) for spectacle/glasses wearer.</description>
    <arg name="tab-width" value="4"/>

    <!--
    ### Basic Coding Standard
    -->

    <!-- Code MUST follow all rules outlined in PSR-1. -->
    <!-- SW mod/addition to hide this -->
    <!-- <rule ref="PSR1"/> -->

    <!-- The term 'StudlyCaps' in PSR-1 MUST be interpreted as PascalCase where the first letter of each word is capitalized including the very first letter. -->


    <!--
    ### Files
    -->

    <!-- SW mod/addition -->
    <!-- UTF-8/16... files without BOM (byte order mark) -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <!-- All PHP files MUST use the Unix LF (linefeed) line ending only. -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>

    <!-- All PHP files MUST end with a non-blank line, terminated with a single LF. -->
    <rule ref="PSR2.Files.EndFileNewline"/>

    <!-- The closing ?> tag MUST be omitted from files containing only PHP. -->
    <rule ref="PSR2.Files.ClosingTag"/>

    <!-- Makes sure that shorthand PHP open tags are not used. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag"/>


    <!--
    ### Lines length
    -->

    <!-- SW mod/addition (use -n to hide warnings between 90-120) -->
    <rule ref="Generic.Files.LineLength">
        <properties>
            <!-- PSR12 default: 120 -->
            <property name="lineLimit" value="90"/>
            <!-- PSR12 default: 0 -->
            <property name="absoluteLineLimit" value="120"/>
            <property name="ignoreComments" value="false" />
        </properties>
    </rule>

     <!-- There MUST NOT be more than one statement per line. E.g $varA=1;$varB=2; fails.-->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>


    <!--
    ### Indenting
    -->

    <!-- Code MUST use an indent of 4 spaces for each indent level, and MUST NOT use tabs for indenting. -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array">
                <element value="T_COMMENT"/>
                <element value="T_DOC_COMMENT_OPEN_TAG"/>
                <element value="T_ARRAY"/>
            </property>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>


    <!--
    ### Keywords and Types
    -->

    <!-- All PHP reserved keywords and types [1][2] MUST be in lower case.
    Any new types and keywords added to future PHP versions MUST be in lower case. -->
    <rule ref="Generic.PHP.LowerCaseKeyword"/>

    <!-- Constants to be in uppercase. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Short form of type keywords MUST be used i.e. bool instead of boolean, int instead of integer etc. E.g $foo = (bool) $isValid; -->
    <rule ref="PSR12.Keywords.ShortFormTypeKeywords"/>
<!-- Missing: but then also for docblock annotations! -->


    <!--
    ### Declare Statements, Namespace, and Import Statements
    -->

    <!-- The extends and implements keywords MUST NOT be declared on the same line as the class name. -->
    <!-- The opening brace of a class must be on the line after the definition by itself. -->
    <rule ref="PEAR.Classes.ClassDeclaration">
        <exclude name="PSR2.Classes.PropertyDeclaration.Underscore"/>
    </rule>


    <!--
    ### Properties and Constants
    -->

    <!-- Property names should not be prefixed with an underscore to indicate visibility.  -->
    <!-- Visibility should be used to declare properties rather than the var keyword.  -->
    <!-- Only one property should be declared within a statement.  -->
    <!-- The static declaration must come after the visibility declaration.-->
    <rule ref="PSR2.Classes.PropertyDeclaration"/>

    <!-- Classes to be instantiated with parentheses(). -->
    <rule ref="PSR12.Classes.ClassInstantiation"/>

    <!-- Visibility must be declared on all constants if your project supports PHP 7.1 or later -->
    <rule ref="PSR12.Properties.ConstantVisibility"/>


    <!--
    ### Methods and Functions
    -->


    <!-- Checks the function declaration corresponds to the following patterns:-->
    <!-- function abc(...); -->
    <!-- function abc(...) -->
    <!-- abstract function abc(...); -->
    <rule ref="Squiz.Functions.FunctionDeclaration"/>

    <!-- In nullable type declarations, there MUST NOT be a space between the question mark and the type,  e.g. ?int-->
    <rule ref="PSR12.Functions.NullableTypeDeclaration"/>

    <!-- Checks that the opening brace of a function is on the line after the function declaration. -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman"/>

    <!-- Checks that there is no empty line after the opening brace of a function.-->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Checks that the closing brace of a function goes directly after the body. -->
    <rule ref="PSR2.Methods.FunctionClosingBrace"/>
    <!-- Checks that there is one empty line before the closing brace of a function.-->
    <!--    <rule ref="Squiz.WhiteSpace.FunctionClosingBrace"/>-->

    <!-- Allow methode name prefixd with underscore to indicate private/protected. E.g: _internalCall() -->
    <rule ref="PSR2.Methods.MethodDeclaration">
        <exclude name="PSR2.Methods.MethodDeclaration.Underscore"/>
    </rule>

    <!-- Verifies that class methods have Visibility(Scope) definition. -->
    <rule ref="Squiz.Scope.MethodScope"/>
    <!-- The php keywords static, public, private, and protected should have one space after them.-->
    <rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing"/>

    <!-- Lowercase keywords (function, public, private, protected, and static) -->
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- Checks the separation lines between functions and methods.-->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <!--The number of blank lines after the last function in a class. -->
            <!-- default: 0 -->
            <property name="spacingAfterLast" value="1"/>
        </properties>
    </rule>

    <!-- Checks for unneeded whitespace.-->
    <!-- Checks that no whitespace precedes the first content of the file.-->
    <!-- Checks that no whitespace exists after the last content of the file.-->
    <!-- Checks that no whitespace resides after content on any line.-->
    <!-- Checks that there are no two empty lines in functions.-->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- If ignoreBlankLines is TRUE, whitespace rules are not checked for blank lines. -->
            <!-- Blank lines are those that contain only whitespace. -->
            <!-- default value: false -->
            <property name="ignoreBlankLines" value="true"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>10</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>10</severity>
    </rule>

    <!-- Checks that duplicate arguments are not used in function declarations.    -->
    <rule ref="Squiz.Functions.FunctionDuplicateArgument"/>

    <!-- Method and function arguments with default values MUST go at the end of the argument list. -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- In the argument list, there MUST NOT be a space before each comma, and there MUST be one space after each comma. -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceBeforeComma">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
    </rule>

    <!-- Argument lists MAY be split across multiple lines, where each subsequent line is indented once.-->
    <!-- If multiple lines, the first item in the list MUST be on the next line, and there MUST be only one argument per line.-->
    <!-- The closing parenthesis and opening brace MUST be placed together on their own line with one space between them.-->
    <!--    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>-->


    <!--
    ### Method and Function Calls
    -->

    <!-- In function call:-->
    <!-- There MUST be a space between the method or function name and the opening parenthesis.-->
    <!-- There MUST be a space after the opening parenthesis.-->
    <!-- There MUST be a space before the closing parenthesis.-->
    <!-- In the argument list, there MUST be no space before each comma and one space after each comma.-->

    <!-- Checks that function arguments have one space after a comma,
     and single spaces surrounding the equals sign for default values.-->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing"/>

    <!-- Disabled for Mumsys to ignore -->
    <!-- Only one argument per line in multi-line function calls -->
    <!-- To set as must have, eg: is_array( $x ) and not is_array($x) use this: -->
    <rule ref="PSR2.Methods.FunctionCallSignature">
        <properties>
            <!-- If allowMultipleArguments is TRUE, multiple arguments can be defined per line in a multi-line call. -->
            <!-- default: false -->
            <property name="allowMultipleArguments" value="true"/>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent">
        <severity>0</severity>
    </rule>

    <!-- Special exception for __autoload as it needs to be global -->
    <rule ref="Squiz.Functions.GlobalFunction"/>


    <!--
    ### Control Structures
    -->

    <!-- The general style rules for control structures are as follows:
      There MUST be one space after the control structure keyword
      There MUST be a space after the opening parenthesis
      There MUST be a space before the closing parenthesis
      There MUST be one space between the closing parenthesis and the opening brace
      The structure body MUST be indented once
      The closing brace MUST be on the next line after the body
      The body of each structure MUST be enclosed by braces. -->

    <!-- Verifies that inline control statements are NOT present. -->
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>

    <!-- Control Structures have 1 spaces after opening parentheses and 1 spaces before closing parentheses. -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>

    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>

    <!-- Closing braces of scopes to be aligned correctly.-->
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace"/>

    <!-- Control structure keywords in lowercase. -->
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>


    <!--
    ### if, elseif, else
    -->

    <!-- The keyword elseif SHOULD be used instead of else if so that all control keywords look like single words. -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration"/>


    <!--
    ### switch, case
    -->

    <!-- Case statements should be indented 4 spaces from the switch keyword.  -->
    <!-- It should also be followed by a space.  -->
    <!-- Colons in switch declarations should not be preceded by whitespace.  -->
    <!-- Break statements should be indented 4 more spaces from the case statement.  -->
    <!-- There must be a comment when falling through from one case into the next.-->
    <rule ref="PSR2.ControlStructures.SwitchDeclaration"/>


    <!--
    ### foreach & for
    -->

    <!-- Space between each condition of foreach loops. -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>

    <!-- Space between each condition of for loops.-->
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1" />
            <property name="requiredSpacesBeforeClose" value="1" />
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingAfterOpen">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration.SpacingBeforeClose">
        <severity>0</severity>
    </rule>

    <!-- exclude this message as it is already checked in Generic.PHP.LowerCaseKeyword -->
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration.AsNotLower">
        <severity>0</severity>
    </rule>


    <!--
    ### Operators
    -->

    <!-- All binary and ternary operators MUST be preceded and followed by at least one space;
    multiple spaces MAY be used for readability purpose.
    This includes all arithmetic, comparison, assignment, bitwise, logical (excluding ! which is unary),
    string concatenation, type operators, trait operators (insteadof and as),
    and the single pipe operator (e.g. ExceptionType1 | ExceptionType2 $e). -->
    <rule ref="PSR12.Operators.OperatorSpacing"/>

    <!-- There MUST NOT be any whitespace between the increment/decrement operators and the variable being incremented/decremented. -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- Ensure there is no whitespace before a semicolon.. -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Makes sure there are spaces around the concatenation operator. -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <!-- The number of spaces before and after a string concat. -->
            <!-- default value: 0 -->
            <property name="spacing" value="1" />
            <!-- Allow newlines instead of spaces. -->
            <!-- default value: false -->
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>


    <!--
    ### Type Casting
    -->

    <!-- There MUST NOT be any spaces inside the type casting parentheses. -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>


    <!--
    ### Array
    -->

    <!-- This standard covers all array declarations, regardless of the number and type of values contained within the array. -->
    <!-- This rule conflicts with space rules -->
    <!--    <rule ref="Squiz.Arrays.ArrayDeclaration"/>-->

    <!-- Ensure that there are no spaces around square brackets.-->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!--
    ### Comments
    -->

    <!-- Parses and verifies the class doc comment.-->
    <!-- Verifies that :-->
    <!-- <ul>-->
    <!--  <li>A class doc comment exists.</li>-->
    <!--  <li>The comment uses the correct docblock style.</li>-->
    <!--  <li>There are no blank lines after the class comment.</li>-->
    <!--  <li>Tags can be used in the docblock, Default: None.</li>-->
    <!-- </ul>-->
    <rule ref="Squiz.Commenting.ClassComment">
        <exclude name="Squiz.Commenting.ClassComment.TagNotAllowed"/>
    </rule>


    <!-- For methods/ functions -->
    <!-- more lasy but requires to many annotations -->
    <!-- <rule ref="PEAR.Commenting.FunctionComment"/> -->
    <!-- Squiz.Commenting.FunctionComment is more strict, To be improved to be more lasy here -->
    <rule ref="Squiz.Commenting.FunctionComment">
        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>
        <exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop"/>
    </rule>

    <rule ref="Squiz.Commenting.FunctionCommentThrowTag">
        <type>error</type>
    </rule>

    <rule ref="Squiz.Commenting.BlockComment"/>


    <!-- Parses and verifies the class function doc comment.-->
    <!-- Functions must have a non-empty doc comment.  -->
    <!-- The short description must be on the second line of the comment.  -->
    <!-- Each description must have one blank comment line before and after.  -->
    <!-- There must be one blank line before the tags in the comments.  -->
    <!-- There must be a tag for each of the parameters in the right order with the right variable names with a comment.  -->
    <!-- There must be a return tag.  Any throw tag must have an exception class.-->

    <!-- Tests that the stars in a doc comment align correctly. -->
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>

    <!-- Checks for empty catch clause without a comment. -->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>


    <!--
    ### Other rules
    -->

    <!-- Check & fix whitespace on the inside of arbitrary parentheses.
      Arbitrary parentheses are those which are not owned by a function (call),
      array or control structure.
      Spacing on the outside is not checked on purpose as this would too easily conflict
      with other spacing rules.-->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="spacing" value="1" />
        </properties>
    </rule>

    <!-- There MUST NOT be any whitespace between the increment/decrement operators and the variable being incremented/decremented. -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- SW mod/addition -->
    <!-- Error out dup class names about all files when scanning directories -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

</ruleset>
